import streamlit as st
from PIL import Image
from io import BytesIO
import requests, pathlib
import os

DEFAULT_API = os.getenv("API_URL", "http://localhost:8080")
ROOT_DIR    = pathlib.Path(__file__).resolve().parent
MODELS_DIR  = ROOT_DIR / "models"

st.set_page_config(
    page_title="üåº Flower Retrieval System",
    page_icon="üåº",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.title("üåº Flower Retrieval System")
st.markdown("**–°–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ü–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è**")
st.sidebar.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
api_url = st.sidebar.text_input("API URL", DEFAULT_API)


@st.cache_data(show_spinner=False)
def fetch_models(api: str):
    try:
        r = requests.get(f"{api.rstrip('/')}/models", timeout=5)
        r.raise_for_status()
        return r.json().get("models", [])
    except Exception:
        return []

model_list = fetch_models(api_url)
if not model_list:  
    model_list = sorted([p.name for p in MODELS_DIR.iterdir() if p.is_dir()])

if not model_list:
    st.sidebar.error("–ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"); st.stop()

model_choice = st.sidebar.selectbox("–ú–æ–¥–µ–ª—å", model_list, index=0)

with st.sidebar.expander("‚Ñπ–û —Å–∏—Å—Ç–µ–º–µ"):
    st.markdown(
        """
        - –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–≤–µ—Ç–∫–∞  
        - –°–∏—Å—Ç–µ–º–∞ –Ω–∞–π–¥—ë—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è  
        - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Å—Ö–æ–∂–µ—Å—Ç–∏  
        **–§–æ—Ä–º–∞—Ç—ã:** JPG ¬∑ PNG ¬∑ JPEG
        """
    )

col_query, col_results = st.columns([1, 2])

with col_query:
    st.subheader("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    upload = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–≤–µ—Ç–∫–∞",
        type=["jpg", "jpeg", "png"],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, JPEG"
    )
    if upload:
        st.image(upload, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                 use_container_width=True)
        st.info(f"**–§–∞–π–ª:** {upload.name}\n**–†–∞–∑–º–µ—Ä:** {len(upload.getvalue())} –±–∞–π—Ç")

with col_results:
    st.subheader("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞")

    if upload and st.button("–ù–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"):
        with st.spinner("–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π‚Ä¶"):
            try:
                files  = {"file": (upload.name, upload.getvalue(), "image/jpeg")}
                params = {"model": model_choice}

                resp = requests.post(f"{api_url.rstrip('/')}/predict",
                                     params=params, files=files, timeout=30)

                if resp.status_code != 200:
                    st.error(f"API error {resp.status_code}: {resp.text}")
                    st.stop()

                results = resp.json().get("results", [])[:5]

            except requests.exceptions.RequestException as e:
                st.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {e}")
                st.stop()
            except Exception as e:
                st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                st.stop()

            if not results:
                st.warning("!!–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                st.stop()

            st.success(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} –ø–æ—Ö–æ–∂–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            grid_cols = st.columns(min(3, len(results)))

            for i, res in enumerate(results):
                c      = grid_cols[i % len(grid_cols)]
                sim    = res.get("similarity", res.get("similarity_score", 0))
                img_p  = (
                    ROOT_DIR / res["image_path"]
                    if (ROOT_DIR / res["image_path"]).exists()
                    else pathlib.Path(res["image_path"]).resolve()
                )
                if img_p.exists():
                    c.image(str(img_p), caption=f"{sim:.3f}",
                            use_container_width=True)
                else:
                    c.warning("üñºÔ∏è not found")
                    c.caption(res["image_path"])

            with st.expander("–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"):
                st.json(resp.json())
    elif not upload:
        st.info("üëÜ –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")


st.markdown("---")
st.markdown("**–¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ ML-–∏–Ω–∂–µ–Ω–µ—Ä–∞** ‚Äì Image Retrieval for Flowers")
